name: Reusable workflow

permissions: read-all

on:
  workflow_call:
    inputs:
      go-version:
        required: true
        type: string
      working-dir:
        required: false
        type: string
    outputs:
      go-binary-name:
        description: "The name of the generated binary uploaded to the artifact registry"
        value: ${{ jobs.provenance.outputs.go-binary-name }}

      firstword:
        description: "The first output string"
        value: ${{ jobs.example_job.outputs.output1 }}
      secondword:
        description: "The second output string"
        value: ${{ jobs.example_job.outputs.output2 }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # v2.3.4
        with:
          fetch-depth: 0
      # Code needed (not tested) if go-vesion is made optional.
      # See https://stackoverflow.com/questions/67368005/check-whether-environment-variable-is-empty.
      - name: Set up golang environment
        uses: actions/setup-go@424fc82d43fa5a37540bae62709ddcc23d9520d4 # v2.1.3
        with:
          go-version: ${{ inputs.go-version }}
      
      # TODO(hermeticity)
      # - name: Enable hermeticity
      # uses: slsa/hermeticity@xxx
      #   with:
      #     to-state: enabled

      - name: Download dependencies
        shell: bash
        run: |
          go mod vendor
      
      # TODO(hermeticity)
      # - name: Disable hermeticity
      # uses: slsa/hermeticity@xxx
      #   with:
      #     to-state: disabled

      - name: Build project
        shell: bash
        run: |
          go build -o SLSA_BINARY

      #TODO(upload): verify how the action handles malicious names.
      - name: Upload the artifact
        uses: actions/upload-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2 # v2.3.1
        with:
          name: SLSA_BINARY
          path: SLSA_BINARY
          retention-days: 5

  provenance:
    permissions:
      id-token: write
      packages: write
      contents: read

    name: provenance
    runs-on: ubuntu-latest
    needs: build
    outputs:
      go-binary-name: ${{ steps.cosignid.outputs.go-binary-name }}
    
    # runs-on: ubuntu-latest
    #   - uses: ./.github/actions/build-go
    #     with:
    #       go-version: ${{ inputs.go-version }}
    
    steps:
        # Sign binary and provenance and upload to Container registry.
      #- uses: sigstore/cosign-installer@main
      - name: Upload binary as blob and sign with provenance
        id: cosignid
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          
          echo "::set-output name=go-binary-name::SLSA_BINARY"
  example_job:
    name: Generate output
    runs-on: ubuntu-latest
    # Map the job outputs to step outputs
    outputs:
      output1: ${{ steps.step1.outputs.firstword }}
      output2: ${{ steps.step2.outputs.secondword }}
    steps:
      - id: step1
        run: echo "::set-output name=firstword::hello"
      - id: step2
        run: echo "::set-output name=secondword::world"