name: SLSA go builder

permissions:
  contents: read

env:
  GENERATED_BINARY: generated-go-binary
  #TODO: let caller upload ?
  REGISTRY: ghcr.io
  BUILDER_BINARY: builder
  BUILDER_REPOSITORY: laurentsimon/slsa-on-github
  BUILDER_REF: feat/herm

###################################################################
#                                                                 #
#            Input and output argument definitions                #
#                                                                 #
###################################################################
on:
  workflow_call:
    inputs:
      go-version:
        description: "The go version to use"
        required: true
        type: string
      upload-location:
        description: "Upload registry location"
        required: false
        type: string
        default: "$REGISTRY/${{ github.repository }}"
      env:
        description: "Env variables to pass to the builder"
        required: false
        type: string
    outputs:
      go-binary-name:
        description: "The name of the generated binary uploaded to the artifact registry"
        value: ${{ jobs.build.outputs.go-binary-name }}

jobs:
  builder:
    outputs:
      go-builder-sha256: ${{ steps.builder-gen.outputs.go-builder-sha256 }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # v2.3.4
        with:
          fetch-depth: 0
          repository: "${{ env.BUILDER_REPOSITORY }}"
          ref: "${{ env.BUILDER_REF }}"

      - name: Set up golang environment
        uses: actions/setup-go@424fc82d43fa5a37540bae62709ddcc23d9520d4 # v2.1.3
        with:
          go-version: 1.17

      - name: Download dependencies
        shell: bash
        run: |
          set -euo pipefail
          #TODO(reproducible)
          cd build-go
          go mod vendor
          cd -

      # TODO(hermeticity) OS-level.
      # - name: Disable hermeticity
      # uses: slsa/hermeticity@xxx
      #   with:
      #     to-state: enabled

      - name: Build builder
        shell: bash
        id: builder-gen
        env:
          BUILDER_BINARY: "${{ env.BUILDER_BINARY }}"
        run: |
            set -euo pipefail
            cd build-go
            # https://go.dev/ref/mod#build-commands.
            go build -mod=vendor -o "$BUILDER_BINARY"
            BUILDER_DIGEST=$(sha256sum "$BUILDER_BINARY" | awk '{print $1}')
            echo "::set-output name=go-builder-sha256::$BUILDER_DIGEST"
            echo "hash of $BUILDER_BINARY is $BUILDER_DIGEST"

      - name: Upload the builder
        uses: actions/upload-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2 # v2.3.1
        with:
          name: "${{ env.BUILDER_BINARY }}"
          path: "build-go/${{ env.BUILDER_BINARY }}"
          retention-days: 5

  build:
    outputs:
      go-binary-sha256: ${{ steps.build-gen.outputs.go-binary-sha256 }}
      go-binary-name: ${{ steps.build-gen.outputs.go-binary-name }}
    runs-on: ubuntu-latest
    needs: builder
    steps:
      - name: Checkout the repository
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # v2.3.4
        with:
          fetch-depth: 0

      # Code needed (not tested) if go-vesion is made optional.
      # See https://stackoverflow.com/questions/67368005/check-whether-environment-variable-is-empty.
      - name: Set up golang environment
        uses: actions/setup-go@424fc82d43fa5a37540bae62709ddcc23d9520d4 # v2.1.3
        with:
          go-version: ${{ inputs.go-version }}

      - name: Download builder
        uses: 'actions/download-artifact@v2'
        with:
          name: "${{ env.BUILDER_BINARY }}"

      - name: Verify builder
        env:
          BUILDER_HASH: "${{ needs.builder.outputs.go-builder-sha256 }}"
          BUILDER_BINARY: "${{ env.BUILDER_BINARY }}"
        run: |
          set -euo pipefail
          echo "hash of builder should be $BUILDER_HASH"
          DIGEST=$(sha256sum "$BUILDER_BINARY" | awk '{print $1}')
          echo "hash computed is $DIGEST"
          pwd
          chmod a+x "$BUILDER_BINARY"
          ls l
          #TODO: compare hashes and fail if they are different.

      - name: Download dependencies
        shell: bash
        run: |
          set -euo pipefail
          go mod vendor

      # TODO(hermeticity) OS-level.
      # - name: Disable hermeticity
      # uses: slsa/hermeticity@xxx
      #   with:
      #     to-state: enabled

      - name: Build project
        id: build-gen
        shell: bash
        env:
          BINARY_NAME: "${{ env.GENERATED_BINARY }}"
          BUILDER_BINARY: "${{ env.BUILDER_BINARY }}"
          UNTRUSTED_ENVS: "${{ inputs.env }}"
        # TODO: change directory using working-dir.
        run: |
          set -euo pipefail
          #go build $UNTRUSTED_FLAGS -trimpath -tags=netgo -ldflags="$UNTRUSTED_LDFLAGS" -mod=vendor -o "$UNTRUSTED_BINARY_NAME"
          pwd
          ls -l
          echo "./$BUILDER_BINARY" ./releaser.yml "$BINARY_NAME" "$UNTRUSTED_ENVS"
          ./"$BUILDER_BINARY" ./releaser.yml "$BINARY_NAME" "$UNTRUSTED_ENVS"
          ls -l
          export DIGEST=$(sha256sum "$BINARY_NAME" | awk '{print $1}')
          # TODO: digest and names will be returned by the builder using info frm config file.
          echo "::set-output name=go-binary-name::$BINARY_NAME"
          echo "::set-output name=go-binary-sha256::$DIGEST"

      #TODO(upload): verify how the action handles malicious names.
      - name: Upload the artifact
        uses: actions/upload-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2 # v2.3.1
        with:
          name: ${{ steps.build-gen.outputs.go-binary-name }}
          path: ${{ steps.build-gen.outputs.go-binary-name }}
          retention-days: 5

  provenance:
    permissions:
      id-token: write
      # package should be removed and done by caller.
      # packages: write
      contents: read

    name: provenance
    runs-on: ubuntu-latest
    needs: build
    steps:    
      - uses: actions/checkout@v2.4.0
        with:
          repository: 'asraa/slsa-on-github'
      - uses: actions/setup-go@v2
      # - name: build provenance generator
      #   run: |
      #     cd slsa-provenance/generator/
      #     go build -o ../../prov ./cmd/main.go
      #     cd
      #     

      # Download build from previous job
      - uses: 'actions/download-artifact@v2'
        with:
          name: ${{ needs.build.outputs.go-binary-name }}

      - name: Generate provenance for build in previous job
        env:
          DIGEST: ${{ needs.build.outputs.go-binary-sha256 }}
          UNTRUSTED_BINARY_NAME: ${{ needs.build.outputs.go-binary-name }}
        # TODO: don't store secret in script, set as env variable instead
        run: |
          set -euo pipefail
          echo expected hash is $DIGEST
          export GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          echo ./prov -repository ${{ github.repository }} -digest $DIGEST > att.provenance
          cat att.provenance
          ls
      
      - name: Log in to the GitHub Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # sign binary and provenance and upload to Container registry
      - uses: sigstore/cosign-installer@main
      - name: Upload binary as blob and sign with provenance
        id: cosignid
        env:
          COSIGN_EXPERIMENTAL: "true"
          # Note: binary name is not verified
          UNTRUSTED_BINARY_NAME: ${{ steps.build-gen.outputs.go-binary-name }}
        run: |
          set -euo pipefail
          echo cosign upload blob -f "$UNTRUSTED_BINARY_NAME" ghcr.io/asraa/slsa-github-demo
          echo cosign sign ghcr.io/asraa/slsa-github-demo
          echo cosign attest --predicate att.provenance ghcr.io/asraa/slsa-github-demo
